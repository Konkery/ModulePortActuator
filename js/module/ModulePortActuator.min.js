const OUTPUT_PIN_MODES=["output","analog","opendrain","af_output","af_opendrain","auto"];class ClassPortActuator extends ClassActuator{constructor(opts){if(ClassActuator.call(this,opts),opts.pinModes)for(let i=0;i<this._QuantityChannel;i++)this.Configure(i,{mode:opts.pinModes[i]})}On(_chNum,_val,_opts){let opts=_opts||{},curr_mode=this._Pins[_chNum].getMode();if(!OUTPUT_PIN_MODES.includes(curr_mode)&&!opts.force)return!1;let val=E.clip(_val,0,1);return this.Write(this._Pins[_chNum],val,opts),this._ChStatus[_chNum]=Math.round(val),!0}Off(_chNum){return!!this._Pins[_chNum]&&(this.Write(this._Pins[_chNum],0),this._ChStatus[_chNum]=0,!0)}Write(_pin,_val,_opts){print(arguments),"analog"==this._TypeInSignals[this._Pins.indexOf(_pin)]?analogWrite(_pin,_val,_opts):digitalWrite(_pin,_val)}Configure(_chNum,_opts){return!!OUTPUT_PIN_MODES.includes(_opts.mode)&&(this._Pins[_chNum].mode(_opts.mode),!0)}GetInfo(_chNum){return Object.assign(this._Pins[_chNum].getInfo(),{mode:this._Pins[_chNum].getMode()})}}exports=ClassPortActuator;